{,

    .# Functional Operations
    .########################

    .#? ::list ::list ::block.pu\n  (permusing) permutes elements of two lists and applies an expression to each
    .{ Example:
        aya> "AB" "ab" {P+}.pu
        [["Aa" "Ab"]["Ba" "Bb"]]
        aya> [1 2 3][4 5 6] {P+}.pu
        [[4 5 6][8 10 12][12 15 18]]
    .}
    {la lb ex, [lb la lbEL,\#{ex}]}:pu;


    .#? ::list ::block.tw\n  (takewhile) take from list while the condition is satisfied
    .{ Example:
        aya> 10R {5<}.tw
        [ 1 2 3 4 ]
    .}
    {e,{e!}.N $0= {;;[]} {S~;} .? }:tw;


    .#? ::any ::list ::block.el\n  apply block to `any` and `i` for each element across list
    .{ Example:
        aya> "a" ["A" "B" "C"] {+}.el
        ["aA" "aB" "aC"]
    .}
    {@@.E@\L\@.&}:el;


    .#? ::list ::any ::block.le\n  apply block to `any` and `i` for each element across list
    .{ Example:
        aya> ["A" "B" "C"] "a" {+}.le
        ["Aa" "Ba" "Ca"]
    .}
    {@@\.E@\L@.&}:le;


    .#? ::block.haslocals\n  return true if the block has a local variables
    {.|::locals H}:haslocals;


    .#? ::block.locals\n  get the locals of a block\n  will throw error if block does not have locals
    {.|.locals}:locals;


    .#? ::block.args\n  get an ordered list of argument descriptions to the block\n  empty list if there are none
    {.|.args}:args;


    .#? ::block.makelocals\n  if a block has local variables, return the block, otherwise wrap it in a block that has an empty local variable set
    .{ Example:
        aya> {:a, a 1 +}.makelocals
        {: a , a 1 + }
        aya> {a, a 1 +}.makelocals
        {a , a 1 + }
        aya> {a 1 +}.makelocals
        {, {a 1 +} ~ }
    .}
    {f,
        f.`.haslocals {
            .# f has locals, simply return the block
            f.`
        } {
            .# f does not have locals, wrap it in a block that does
            {: , f~} [::f] .+
        } .?
    }:makelocals;


    .#? ::list ::block.setlocals\n  wrap a block in a scope which has locals provided by the list of symbols
    .{ Example:
        aya> [::x] {:x; "x is $x"}.setlocals :setx
        {: x , {:x ; "$xx is "} ~ }
        aya> 4 setx
        "x is 4"
        aya> x
        ERROR: Variable x not found
    .}
    {syms code,
        {: ,_~} {, code.` :_ } .+ :code;
        0 syms code.`.locals :D;
        code .`
    }:setlocals;


    .#? ::block .use ::list\n  evaulate the variables (given by a list of symbols) in the block in the current scope
    .{ Example:
        aya> 2:y
        2
        aya> {x, x y *}.use[::y] :double
        {x , x 2 * }
        aya> 3 double
        6
    .}
    {(1 hold)({:d__,
        .# Create a dictionary of all values given by the list
        {,}:d__;
        :#{$~\d__:D;};
        .# Substitute the values from the dictionary into the block
        d__ .+
    })}:use;

    .#? ::block .capture ::list\n  capture all vars defined in list as local variables in the block.\n  If the block has no local variables, wrap it in a block that does and return that block
    .{ Example:
        aya> 1:a
        1
        aya> {x, a x +}.capture[::a]
        {x : a , a x + }
        aya> 5 f
        6
        aya> 2:a
        2
        aya> 5 f
        6
    .}
    {(1 hold)({\.makelocals :& .|.locals @ {}.M._capture_vars .+ ;})}:capture;

    .#? ::block .time\n  return the result of the block and the execution time in ms
    {:a__, M$:a__; ~ M$ a__ -} :time;

    .#? ::block.where_const ::dict\n  use variables defined in D in B
    .{ Example
        aya> {a, a b *}.where_const {, 2:b } :double
        {a , a 2 * }
        aya> 3 double
        6

       Set constant values in loops.
       Before
        aya> 3R :# {{a, a b *}.where_const {, 10:b "evaluating..":P} ~}
        evaluating..
        evaluating..
        evaluating..
        [ 10 20 30 ]
       After: (note the parenthesis)
        aya> 3R :# ({a, a b *}.where_const {, 10:b "evaluating..":P})
        evaluating..
        [ 10 20 30 ]

       Escape functions with .` and ~ :
        aya> {a, a fn~}.where_const {, double.` :fn} :apply_double
        {a , a {x , x 2 * } ~ }
        aya> 2 apply_double
        4

       Nesting!
        aya> {a, a fn~}.where_const {, {a, a b *}.where_const {, 2:b} :fn} :apply_double
        {a , a {a , a 2 * } ~ }
        aya> 2 apply_double
        4
    .}
    {1 hold .+}:where_const;

    {(1 hold)(\$\;.makelocals:&.|.locals@.+;)}:where;


    .# Utility Functions
    .#####################


    .# ::list _capture_vars\n  given a list of symbols, return a dict with each symbol and it's assignment
    .{ Example:
        aya> {1 +}:a 2:b
        {1 +} 2
        aya> [::a ::b].capture_vars
        {,
          {1 +}:a;
          2:b;
        }
        aya> [::a ::b ::c].capture_vars
        ERROR: Variable c not found
    .}
    { {1, :# {$~\:=} } }:_capture_vars;


    .#? ::block .op\n  return the block (allows use of (::sym or ::block) .op without type checking
    {}:op;

}
.# Merge with char metatable
{} .M \.+

.# Define operators
{.le}:otimes;
{.el}:odot;
